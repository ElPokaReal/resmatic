// Prisma schema for ResMatic
// DB: PostgreSQL (recommended). Set DATABASE_URL in .env

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum TenantRole {
  OWNER
  MANAGER
  WAITER
}

enum RestaurantStatus {
  ACTIVE
  ARCHIVED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshTokens RefreshToken[]
  ownerRestaurants    Restaurant[]       @relation("OwnerRestaurants")
  restaurantMemberships RestaurantMember[]
}

model RefreshToken {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash  String   @unique
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  @@index([userId])
}

model Restaurant {
  id        String            @id @default(cuid())
  ownerId   String
  owner     User              @relation("OwnerRestaurants", fields: [ownerId], references: [id], onDelete: Cascade)
  name      String
  status    RestaurantStatus  @default(ACTIVE)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  members   RestaurantMember[]
  invites   StaffInvite[]
  menus     Menu[]
  orders    Order[]
  subscriptions Subscription[]
}

model RestaurantMember {
  id           String       @id @default(cuid())
  restaurantId String
  userId       String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenantRole   TenantRole
  createdAt    DateTime     @default(now())

  @@unique([restaurantId, userId])
  @@index([userId])
  @@index([restaurantId])
}

model StaffInvite {
  id           String       @id @default(cuid())
  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  email        String
  tenantRole   TenantRole
  token        String       @unique
  expiresAt    DateTime
  acceptedAt   DateTime?
  createdAt    DateTime     @default(now())

  @@index([restaurantId])
  @@index([email])
}

// --- Menu & Catalog ---

enum MenuItemStatus {
  ACTIVE
  INACTIVE
}

model Menu {
  id            String           @id @default(cuid())
  restaurantId  String
  restaurant    Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  sortOrder     Int              @default(0)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  sections      MenuSection[]

  @@index([restaurantId])
  @@unique([restaurantId, name])
}

model MenuSection {
  id          String     @id @default(cuid())
  menuId      String
  menu        Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  name        String
  description String?
  sortOrder   Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  items       MenuItem[]

  @@index([menuId])
  @@unique([menuId, name])
}

model MenuItem {
  id          String          @id @default(cuid())
  sectionId   String
  section     MenuSection     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Decimal         @db.Decimal(10, 2)
  status      MenuItemStatus  @default(ACTIVE)
  tags        String[]
  sortOrder   Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  orderItems  OrderItem[]

  @@index([sectionId])
  @@unique([sectionId, name])
  @@index([status])
}

// --- Orders ---

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  READY
  COMPLETED
  CANCELED
}

model Order {
  id           String       @id @default(cuid())
  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  status       OrderStatus  @default(PENDING)
  tableNumber  Int?
  customerName String?
  notes        String?
  total        Decimal      @db.Decimal(10, 2)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  items        OrderItem[]
  events       OrderEvent[]

  @@index([restaurantId])
  @@index([status])
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId  String
  menuItem    MenuItem  @relation(fields: [menuItemId], references: [id], onDelete: Restrict)
  nameSnapshot String
  unitPrice    Decimal   @db.Decimal(10, 2)
  quantity     Int       @default(1)
  note         String?
  sortOrder    Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([orderId])
}

model OrderEvent {
  id        String       @id @default(cuid())
  orderId   String
  order     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    OrderStatus
  message   String?
  createdAt DateTime     @default(now())

  @@index([orderId])
  @@index([status])
}

// --- Subscriptions ---

enum SubscriptionStatus {
  ACTIVE
  CANCELED
}

model Plan {
  id           String    @id @default(cuid())
  code         String    @unique
  name         String
  description  String?
  monthlyPrice Decimal   @db.Decimal(10, 2)
  features     String[]
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id           String              @id @default(cuid())
  restaurantId String
  restaurant   Restaurant          @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  planId       String
  plan         Plan                @relation(fields: [planId], references: [id], onDelete: Restrict)
  status       SubscriptionStatus  @default(ACTIVE)
  startsAt     DateTime            @default(now())
  endsAt       DateTime?
  canceledAt   DateTime?
  trialEndsAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  usageCounters UsageCounter[]

  @@index([restaurantId])
  @@index([planId])
  @@index([status])
}

model UsageCounter {
  id              String        @id @default(cuid())
  subscriptionId  String
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  metric          String
  periodStart     DateTime
  periodEnd       DateTime
  value           Int           @default(0)
  updatedAt       DateTime      @updatedAt

  @@unique([subscriptionId, metric, periodStart, periodEnd])
  @@index([subscriptionId])
}
